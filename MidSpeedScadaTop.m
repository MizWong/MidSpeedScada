%-------------------------------------------------------------------------%
% Mid Speed SCADA PHY Simulation
% 
%
%
% Miz.Wong ( Miz.Wang@Hytera.com )
% Hytera Co., Ltd.
%
% 2018.3
%-------------------------------------------------------------------------%

clear all;
% close all;
% figure; 
fP = 0;

%% Parameters
M        =   16;
Rs       =   10e3;
Rb       =   Rs * log2(M);
BB_OSR   =   8;
FsBB     =   Rs * BB_OSR;
IF_OSR   =   36;
FsIF     =   FsBB * IF_OSR;

coefRRC  =   [-0.000178159974626982,0.000345282402581159,0.000805593976170785,0.00108562499888833,0.00110366933313571,0.000836771455744646,0.000331936887789862,-0.000298635514615527,-0.000898768283322091,-0.00130258558942761,-0.00137503923369923,-0.00104966595356931,-0.000354234391580373,0.000583262434588692,0.00155208975939973,0.00229854991135651,0.00258159987893374,0.00223344598653263,0.00121179502438385,-0.000369326654050950,-0.00224012041614478,-0.00401116728230087,-0.00524214782159690,-0.00553263150191025,-0.00461835199685720,-0.00245309860775994,0.000743162222715140,0.00448478472580340,0.00807634186845862,0.0107203871931407,0.0116628235999555,0.0103525808318757,0.00658686250737076,0.000612753472704614,-0.00683900853049108,-0.0146022989546505,-0.0212066237387730,-0.0250768633742574,-0.0247743547774144,-0.0192424566064388,-0.00801612815705781,0.00864172896814822,0.0297045707224639,0.0534594928152015,0.0776919572514775,0.0999547215387410,0.117883256722592,0.129511273755130,0.133538735772974,0.129511273755130,0.117883256722592,0.0999547215387410,0.0776919572514775,0.0534594928152015,0.0297045707224639,0.00864172896814822,-0.00801612815705781,-0.0192424566064388,-0.0247743547774144,-0.0250768633742574,-0.0212066237387730,-0.0146022989546505,-0.00683900853049108,0.000612753472704614,0.00658686250737076,0.0103525808318757,0.0116628235999555,0.0107203871931407,0.00807634186845862,0.00448478472580340,0.000743162222715140,-0.00245309860775994,-0.00461835199685720,-0.00553263150191025,-0.00524214782159690,-0.00401116728230087,-0.00224012041614478,-0.000369326654050950,0.00121179502438385,0.00223344598653263,0.00258159987893374,0.00229854991135651,0.00155208975939973,0.000583262434588692,-0.000354234391580373,-0.00104966595356931,-0.00137503923369923,-0.00130258558942761,-0.000898768283322091,-0.000298635514615527,0.000331936887789862,0.000836771455744646,0.00110366933313571,0.00108562499888833,0.000805593976170785,0.000345282402581159,-0.000178159974626982]';
coefIF   =   [1.09214851599383e-05,9.66672076672884e-06,1.38617827918353e-05,1.91896654648093e-05,2.58483571778955e-05,3.40589761705930e-05,4.40621639407783e-05,5.61234572152121e-05,7.05261961778764e-05,8.75777995272453e-05,0.000107605150599779,0.000130959142906333,0.000158009072471078,0.000189144377198484,0.000224768418346845,0.000265303968189209,0.000311187196071777,0.000362868755256986,0.000420803293931428,0.000485452298319445,0.000557279087627367,0.000636753340588174,0.000724335148446163,0.000820474835176296,0.000925608941967325,0.00104016835012395,0.00116455325298730,0.00129913433539098,0.00144425577597472,0.00160024224095535,0.00176734053667401,0.00194579665196897,0.00213577516327137,0.00233740068516024,0.00255074170309592,0.00277579582168978,0.00301250586906637,0.00326073592017846,0.00352028764683117,0.00379088308043538,0.00407217261264542,0.00436372577424429,0.00466503830448074,0.00497552494677400,0.00529452568971745,0.00562130009132858,0.00595503577104334,0.00629484670360405,0.00663977903266933,0.00698880919841218,0.00734085557700462,0.00769477883948311,0.00804938877642518,0.00840344713959469,0.00875568148355622,0.00910478474669351,0.00944942601952128,0.00978825821419993,0.0101199299839723,0.0104430808359563,0.0107563718721583,0.0110584704781337,0.0113480771814680,0.0116239257651140,0.0118847902808708,0.0121295037151781,0.0123569510676649,0.0125660919619892,0.0127559566606191,0.0129256600717562,0.0130744047218121,0.0132014877551061,0.0133063039067830,0.0133883540730380,0.0134472447628080,0.0134826929112290,0.0134945276053319,0.0134826929112290,0.0134472447628080,0.0133883540730380,0.0133063039067830,0.0132014877551061,0.0130744047218121,0.0129256600717562,0.0127559566606191,0.0125660919619892,0.0123569510676649,0.0121295037151781,0.0118847902808708,0.0116239257651140,0.0113480771814680,0.0110584704781337,0.0107563718721583,0.0104430808359563,0.0101199299839723,0.00978825821419993,0.00944942601952128,0.00910478474669351,0.00875568148355622,0.00840344713959469,0.00804938877642518,0.00769477883948311,0.00734085557700462,0.00698880919841218,0.00663977903266933,0.00629484670360405,0.00595503577104334,0.00562130009132858,0.00529452568971745,0.00497552494677400,0.00466503830448074,0.00436372577424429,0.00407217261264542,0.00379088308043538,0.00352028764683117,0.00326073592017846,0.00301250586906637,0.00277579582168978,0.00255074170309592,0.00233740068516024,0.00213577516327137,0.00194579665196897,0.00176734053667401,0.00160024224095535,0.00144425577597472,0.00129913433539098,0.00116455325298730,0.00104016835012395,0.000925608941967325,0.000820474835176296,0.000724335148446163,0.000636753340588174,0.000557279087627367,0.000485452298319445,0.000420803293931428,0.000362868755256986,0.000311187196071777,0.000265303968189209,0.000224768418346845,0.000189144377198484,0.000158009072471078,0.000130959142906333,0.000107605150599779,8.75777995272453e-05,7.05261961778764e-05,5.61234572152121e-05,4.40621639407783e-05,3.40589761705930e-05,2.58483571778955e-05,1.91896654648093e-05,1.38617827918353e-05,9.66672076672884e-06,1.09214851599383e-05]';

hMod     =   comm.RectangularQAMModulator( M, 'BitInput', true );
hDem     =   comm.RectangularQAMDemodulator( M, 'BitOutput', true );

T        =   0.02;

nTSHead  =   50;
nFTSDvd  =   20;
nFTSLen  =   1;

tBB      =   0 : 1/FsBB : T - 1/FsBB;
tIF      =   0 : 1/FsIF : T - 1/FsIF;

txcVCO   =   300e6;
txcPPM   =   1;
txcFreq  =   100e3;
txcFreq  =   txcFreq + (txcVCO / 1e6)*txcPPM;
txcPhi0  =   0;

rxcFreq  =   100e3;
rxcPhi0  =   pi/3;

dSpped   =   350;
fd       =   2;%( txcFreq * dSpped ) / 3e8;
pdb      =   [0 -22.3];
tau      =   [0 5e-6];
RlChan   =   rayleighchan( (1 / FsIF), fd, tau, pdb);

hEVM     =   comm.EVM( 'ReferenceSignalSource', 'Estimated from reference constellation', ...
                       'ReferenceConstellation', constellation(hMod).' );

hMyDFE   =   fnDFECreate(1, 1, 0.9, hMod, hDem);
hPLLDFE  =   fnDFECreate(1, 1, 0.9, hMod, hDem);

hPhNoise = comm.PhaseNoise('SampleRate',FsBB);

%% Transmitter
txBit    =   randi( [0,1], T*Rb, 1 );
txSym    =   step(hMod, txBit );
txSymUp  =   zeros( length(txSym)*BB_OSR, 1 );
txSymUp(1 : BB_OSR : end) = txSym;
txSymUp  =   txSymUp * BB_OSR;

txSymUp  =   [zeros(200,1); txSymUp; zeros(200,1);];

txSymUp  =   FilterConv( txSymUp.', coefRRC' ).' ;

txSymIF  =   zeros( length(txSymUp)*IF_OSR, 1 );
txSymIF(1 : IF_OSR : end) = txSymUp;
txSymIF  =   txSymIF * IF_OSR;
txSymIF  =   FilterConv( txSymIF.', coefIF' ).' ;
tIF      =   0 : 1/FsIF : length(txSymUp)/FsBB - 1/FsIF;
txSymIF  =   txSymIF .* exp( 1j*( 2*pi*txcFreq*tIF' + txcPhi0 ) );

%% Channel
rxSymIF  =   txSymIF;
rxSymIF  =   filter( RlChan, rxSymIF );
rxSymIF  =   awgn( rxSymIF, -10, 'measured' );

%% Receiver
rxSymIF  =   rxSymIF ./ exp( 1j*( 2*pi*rxcFreq*tIF' + rxcPhi0 ) );
rxSymIF  =   FilterConv( rxSymIF.', coefIF' ).' ;
rxSymUp  =   zeros( length(rxSymIF) / IF_OSR, 1 );
rxSymUp  =   rxSymIF( 1 : IF_OSR : end );

rxSymUp  =   complex(real(rxSymUp) + 5, imag(rxSymUp)-5);

fP=fP+1;subplot(3,3,fP);psd(spectrum.periodogram, rxSymUp, 'Fs',FsBB, 'CenterDC',true);title('PSD RX');

% rxSymUp  =   hPhNoise(rxSymUp);

rxSymUp  =   FilterConv( rxSymUp.', coefRRC' ).';

fP=fP+1;subplot(3,3,fP);plot(rxSymUp,'.');title('Post RRC');

avePwr   =   zeros(1, BB_OSR);

for ii   =   1:1:BB_OSR
    avePwr(ii) = mean(abs(rxSymUp(ii:BB_OSR:end)));
end
[max T0] =   max(avePwr);

rxSymUp  =   rxSymUp(201:end-200);

rxSym    =   rxSymUp(T0:BB_OSR:end);

fprintf( 'T0 = %d\r\n', T0 );

rxSym = complex( real(rxSym) - mean(real(rxSym)), imag(rxSym) - mean(imag(rxSym)) );

fP=fP+1;subplot(3,3,fP);plot(rxSym,'.');title('Post DownSample+DC Blocking');

release(hEVM);

fprintf( 'EVM Post-DownSample+DC Blocking = %f%%\r\n', hEVM(rxSym) );

[hMyDFE, rxSymDFE, vyDcsDFE] = fnDFE( hMyDFE, rxSym, [1:nTSHead], txSym );

fP=fP+1;subplot(3,3,fP);plot(rxSymDFE(nTSHead+1:end),'.');title('Post Equalize');

fP=fP+1;subplot(3,3,fP);stem(real(hMyDFE.e));hold on;stem(imag(hMyDFE.e));hold off;title('Equalizer error');

release(hEVM);

fprintf( 'EVM Post-EQ = %f%%\r\n', hEVM(rxSymDFE(nTSHead+1:end)) );


[hPLLDFE, rxSymPLLDFE, vyDcsPLLDFE] = fnPLLDFE( hPLLDFE, rxSym, [1:nTSHead], txSym );

fP=fP+1;subplot(3,3,fP);plot(rxSymPLLDFE(nTSHead+1:end),'.');title('Post PLL Equalize');

fP=fP+1;subplot(3,3,fP);stem(real(hPLLDFE.e));hold on;stem(imag(hPLLDFE.e));hold off;title('PLL Equalizer error');

fP=fP+1;subplot(3,3,fP);stem(hPLLDFE.ePhase);title('PLL Tracking Error');

fP=fP+1;subplot(3,3,fP);stem(angle(rxSym./txSym));hold on;plot(angle(rxSymDFE./txSym));plot(angle(rxSymPLLDFE./txSym));hold off;title('Phase Error with DFE and PLLDFE');

release(hEVM);

BER = (sum( vyDcsDFE(nTSHead*log2(M)+1:end)' ~= txBit(nTSHead*log2(M)+1:end) ) / length(txBit(nTSHead*log2(M)+1:end))) * 100
BER = (sum( vyDcsPLLDFE(nTSHead*log2(M)+1:end)' ~= txBit(nTSHead*log2(M)+1:end) ) / length(txBit(nTSHead*log2(M)+1:end))) * 100
fprintf( 'EVM Post-PLLEQ = %f%%\r\n', hEVM(rxSymPLLDFE(nTSHead+1:end)) );

%hs = spectrum.periodogram; figure;psd(hs, rxSym, 'Fs',FSIF, 'CenterDC',true)
